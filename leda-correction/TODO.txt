- mudar a tabela geral para ser igual a tabela gerada pelo surefire - OK
- colocar cores nas colunas da tabela central para distinguir os testes que passaram, os erros, as falhas, skipped - OK
- colocar uma coluna com o percentual dos testes que tiveram sucesso - NAO PRECISA
- Tentar capturar da suite a quantidade de testes que ela tem. NAO IMPLEMENTADO
- Tentar guardar a saida do maven em algum lugar (arquivo ou stream). Ver o InvocationResult que tem um 
  InvocationOutputHandler. ver a opcao "-l,--log-file <arg>" - OK
  setar programaticamente: System.setOut(new PrintStream(new BufferedOutputStream(new FileOutputStream("/location/to/console.out")), true));  

- Tentar colocar informacao de possivel loop infinito quando der timeout.
- Quando der erro de compila��o, colocar link para o output do maven. - OK
- Nao precisa gerar tantas pastas quando vai criar a pasta base para os projetos a serem corrigidos. - OK
- Verificar a possibilidade de integra��o como check style.
- Verificar se ao ocorrer um timeout a execucao dos demais p�ra.
- Trabalhar com links relativos no relatorio geral (para o especifico). - OK

- Tem que usar profiles e injetar informacoes d eservidor nos arquivo xml que vai gerar para os alunos. - OK
- colcoar a correcao numa thread para nao congelar a aplicacao. - OK
- Tem que ordenar os alunos por ordem alfabetica na planilha geral e colocar os alunos que nao enviaram o roteiro no relatorio
  para facilitar a correcao. - OK
- poderia manter a lista dos alunos matriculados (vale apena?)
- quando da erro de compilacao no projeto do aluno e nao gera a pasta site o generate final report retorna nullpointer. consertar isso.
- fazer uma ferramenta que mostra as similaridades dos resultados baseados nos testes de correcao.
- alterar o compactor para que ele adicione atributos do dono do arquivo nos arquivos java antes de compactar e enviar - OK
  http://stackoverflow.com/questions/15906793/is-it-possible-to-set-custom-metadata-on-files-using-java
  https://docs.oracle.com/javase/tutorial/essential/io/fileAttr.html
  exemplo:
  public class Example {

  public static void main(final String[] args) throws Exception {
    final Path file = Paths.get(Example.class.getResource("/samples/example.txt").toURI()).toAbsolutePath();

    final UserDefinedFileAttributeView view = Files.getFileAttributeView(file, UserDefinedFileAttributeView.class);

    // The file attribute
    final String name = "com.javacreed.attr.1";
    final String value = "Custom Value 1";

    // Write the properties
    final byte[] bytes = value.getBytes("UTF-8");
    final ByteBuffer writeBuffer = ByteBuffer.allocate(bytes.length);
    writeBuffer.put(bytes);
    writeBuffer.flip();
    view.write(name, writeBuffer);

    // Read the property
    final ByteBuffer readBuffer = ByteBuffer.allocate(view.size(name));
    view.read(name, readBuffer);
    readBuffer.flip();
    final String valueFromAttributes = new String(readBuffer.array(), "UTF-8");
    System.out.println("File Attribute: " + valueFromAttributes);
  }
}

- fazer o corretor capturar a lista dos estudantes e montar a tabela com todos os estudantes
- fazer o corretor gerar um arquivo json com os resultados das correcoes por cada aluno. os comentarios tambem
ficarao neste json.
package br.edu.ufcg.ccc.leda.util;

import java.io.File;
import java.io.FileFilter;
import java.io.IOException;
import java.net.URL;

import org.jdom2.Document;
import org.jdom2.Element;
import org.jdom2.JDOMException;

public class ReportUtility {
	

	/**
	 * It generates the main report referencing all students reports. 
	 * @param rootFolder the folder containing all students projects folder generated by the correction
	 * tool. Normally this folder is the same as the folder containing all submissions (zip files).
	 * @return
	 * @throws IOException
	 * @throws JDOMException
	 */
	private TestReport generateReport(File rootFolder) throws IOException, JDOMException{
		TestReport report = new TestReport(null,0);
		
		if(rootFolder.isDirectory()){
			File[] subFolders =rootFolder.listFiles(new FileFilter() {
				@Override
				public boolean accept(File pathname) {
					return pathname.isDirectory();
				}
			});
			for (File subFolder : subFolders) {
				File xmlFile = this.getSurefireReportFile(subFolder);
				if(xmlFile != null){
					XMLFileUtility fu = new XMLFileUtility();
					Document xml = fu.loadXMLFile(xmlFile);
					Element testSuite = xml.getRootElement();
					int tests = Integer.parseInt(testSuite.getAttributeValue("tests"));
					if(report.getTestSuitName() == null){
						String testSuiteName = testSuite.getAttributeValue("name");
						report.setTestSuitName(testSuiteName);
						report.setNumberOfTests(tests);
					}
					double time = Double.parseDouble(testSuite.getAttributeValue("time"));
					int failures = Integer.parseInt(testSuite.getAttributeValue("failures"));
					String studentName = subFolder.getName();
					String generatedReport = subFolder.getAbsolutePath() + 
							File.separator + "target" + File.separator + "site" + File.separator + "project-reports.html";
					URL completeReport = new File(generatedReport).toURI().toURL();
					int errors = Integer.parseInt(testSuite.getAttributeValue("errors"));
					TestReportItem item = new TestReportItem(xmlFile, studentName, tests, errors, failures, time, completeReport);
					report.getReportItems().add(item);
				} else{
					String studentName = subFolder.getName();
					TestReportErrorItem errorItem = new TestReportErrorItem(studentName);
					report.getReportItems().add(errorItem);
				}
			}
		}
		
		return report;
	}

	
	public void createAndSaveReport(File rootFolder, String templateHtml, String finalPathHtml) throws IOException, JDOMException{
		TestReport report = this.generateReport(rootFolder);
		HTMLFileUtility htmlfu = new HTMLFileUtility();
		org.jsoup.nodes.Document doc = htmlfu.buildMainReport(templateHtml, "SUITENAME", report.getTestSuitName(), 
				"TESTS", report.getNumberOfTests(), report);
		htmlfu.writeXMLFile(doc, finalPathHtml);
	}
	
	private File getSurefireReportFile(File folder){
		File result = null;
		File targetFolder = new File(folder,"target");
		if(targetFolder.exists()){
			File surefireFolder = new File(targetFolder,"surefire-reports");
			if(surefireFolder.exists()){
				File[] xmlFiles = surefireFolder.listFiles(new FileFilter() {
					
					@Override
					public boolean accept(File pathname) {
						
						return pathname.getName().endsWith(".xml");
					}
				});
				if(xmlFiles.length > 0){
					result = xmlFiles[0];
				}
			}
		}
		return result;
	}
}
